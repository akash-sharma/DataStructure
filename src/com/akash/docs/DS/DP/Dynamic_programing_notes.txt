Links :
https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/
https://www.youtube.com/watch?v=OQ5jsbhAv_M&list=PLfMspJ0TLR5HRFu2kLh3U4mvStMO8QURm


Dynamic Programming :

Careful brute force = execute all scenarios carefully
Exhaustive search in a clever way
subproblems + reuse

(Q)How DP is related to divide and conquer :

Divide and Conquer algorithms partition the problem into DISJOINT subproblems.
i.e. no subproblem overlaps.

DP is applied when subproblems overlaps,
i.e. two or more subproblems share same subsubproblems.

It computes a subproblem just once and stores it in an answer table.
By this it avoids the cost recomputing the same subproblem.

properties of Dynamic programming :

=>Overlapping subproblems :
When subproblems of a problem are not disjoint
i.e. subproblem share subsubproblems
solutions to these subproblems are stored and reused further

=>Optimal Substructure : 
Optimal solutions to a problem incorporate optimal solutions to its related subproblems, which may be solved independently.

Divide and Conquer approach has optimal substructure property but
it does not have overlapping subproblems property.

=>Divide And Conquer approach examples :
1)Binary search
2)Merge sort
3)count no of inversions
4)Quick sort
5)calculate pow(x,n)
6)median of two sorted arrays
7)Closest pair of points

==================================================

=>Dynamic Programming examples :

Minimum cells required to reach destination with jumps equal to cell values
** https://www.geeksforgeeks.org/minimum-cells-required-reach-destination-jumps-equal-cell-values/

ugly mumbers
fibonacci
Catalan number
Tiling problem : 2xN dashboad, 2x1 tiles
Friends Pairing Problem
coin change problem : 
	-> Total number of ways to make sum
	-> min number of coins to make given sum
check if Set of non-negative numbers,contains a subset with given sum
    -> 2D array
Set of non-negative numbers,Print all subsets with given sum
    -> traverse 2D array from bottom right
check if Set of non-negative numbers,contains a subset with sum divisible by m
gold mine problem
Rod cutting problem
zero one knapsack
Longest common subsequence
Longest common substring
	-> same as LCSubsequence
	-> suffix tree can also be used(Compressed Trie)
Longest Palindromic Subsequence, 	print Subsequence
Longest palindromic substring, 		print substring
	->suffix tree can also be used(Compressed Trie)
Longest increasing subArray
Longest increasing subsequence
Longest Bitonic Subsequence  -> DP
Longest Bitonic SubArray	-> O(n) time, O(1) space
Maximum Sum Increasing Subsequence (positive numbers)
	->similar to longest increasing subsequence
Maximum Sum Subarray	(negative and positive both)

--longest repeated substring
	->DP
	->suffix tree can also be used(Compressed Trie)
	->https://stackoverflow.com/questions/10355103/finding-the-longest-repeated-substring

Check if a given string is a rotation of a palindrome
Min Cost Path

--Egg dropping problem
--edit distance
	insert , remove , replace
	-> display all the words in a dictionary that are near proximity to a given word incorrectly spelled word
--Optimal Binary Search Tree
	keys[] = {10, 12}, freq[] = {34, 50}
--parenthesis problem
	symbol[]    = {T, F, T}
	operator[]  = {^, &}
	Count the number of ways we can parenthesize the expression for TRUE answer


==================================================

f(n) = f(n-1) + f(n-2)

int fibonacci(int n) {
	if(n==0 || n==1) {
		return n;
	}
	int fib[] = new int[n+1];
	fib[0] = 0;
	fib[1] = 1;
	for(int i=2; i<=n; i++) {
		fib[i] = fib[i-1] + fib[i-2];
	}
	return fib[n];
}

--------------------------

//2,3,5
//numbers whose only prime factors are 2, 3 or 5
void printUglyNumber(int n) {
	int memo[] = new int[];
	memo[0] = 1;
	int pos2 = 0;
	int pos3 = 0;
	int pos5 = 0;
	int num2 = 2 * memo[pos2];
	int num3 = 3 * memo[pos3];
	int num5 = 5 * memo[pos5];
	int index = 1;
	
	while(index < n) {
		if(num2 < num3 && num2 < num5) {
			memo[index++] = num2;
			num2 = 2 * memo[++pos2];
			while(num2 == num3 || num2 == num5) {
				num2 = 2 * memo[++pos2];
			}
		} else if(num3 < num2 && num3 < num5) {
			memo[index++] = num3;
			num3 = 3 * memo[++pos3];
			while(num3 == num2 || num3 == num5) {
				num3 = 3 * memo[++pos3];
			}
		} else {
			memo[index++] = num5;
			num5 = 5 * memo[++pos5];
			while(num5 == num2 || num5 == num3) {
				num5 = 5 * memo[++pos5];
			}
		}
	}
	return memo[n-1];
}

--------------------------

//no of BSTs of a sorted array
//total number of ways to make n opening and closing braces
//total number of full binary trees by n nodes

f(n) = f(0)*f(n-1) + f(1)*f(n-2) + f(2)*f(n-3) ... + f(n-1)*f(0)

int catalanNumber(int n) {
	int catalan[] = new int[n+1];
	catalan[0] = 1;
	catalan[1] = 1;
	for(int i=2; i<=n; i++) {
		for(int j=0; j<i; j++) {
			catalan[i] += catalan[j]*catalan[i-j-1];
		}
	}
	return catalan[n];
}

--------------------------

//2xN dashboard, 2x1 tiles
//count the number of ways to tile the given board

T(n) = T(n-1) + T(n-2)

int tillingProblem(int n) {
	if(n == 1 || n == 2) {
		return n;
	}
	int tiling[] = new int[n];
	tiling[0] = 1;
	tiling[1] = 2;
	for(int i=2; i<n; i++) {
		tiling[i] = tiling[i-1] + tiling[i-2];
	}
	return tiling[n-1];
}

--------------------------

T(n) = T(n-1) + (n-1)*T(n-2)

int friendPairProblem(int n) {
	if(n==1 || n==2) {
		return n;
	}
	int friendPair[] = new int[n];
	friendPair[0] = 1;
	friendPair[1] = 2;
	for(int i=2; i<n; i++) {
		friendPair[i] = friendPair[i-1] + (i-1) * friendPair[i-2];
	}
	return friendPair[n-1];
}


--------------------------

// coin change problem : Min number of coins to make given sum
// if value of sum is very large, then memory usage can be optimized
// by using fixed size window array as a Queue for size of max denomination
// eg : if denominations are : 1,2,5,10 , then array size can be 10

// for every coin i
// T(sum, n) = MAX( T(sum-i, n) )

int minCoinChangeProblem(int sum, int coins[]) {
	int MAX_INT = Integer.MAX_VALUE;
	int minCoin[] = new int[sum+1];
	for(int i=0; i<=sum; i++) {
		minCoin[i] = MAX_INT;
	}
	minCoin[0] = 0;
	for(int i=1; i<=sum; i++) {
		for(int j=0; j<coins.length; j++) {
			if(i > coins[j] && MAX_INT != minCoin[i - coins[j]] ) {
				minCoin[i] = min( minCoin[i - coins[j]] + 1, minCoin[i]);
			}
		}
	}
	if(minCoin[n] == MAX_INT) {
		return 0;
	}
	return minCoin[n];
}

--------------------------

// coin change problem : Total number of ways to make sum
// 2D array can be reduced to Nx2 array
// and Nx2 array can also be reduced to max_denomination x 2 array as in minCoinsCount problem

// for every coin i
// T(sum, n) = T(sum-i, n) + T(sum, n-i)

int waysToMakeSum(int sum, int denominations[]) {
	int waysCount[][] = new int[denominations.length+1][sum+1];
	for(int i=0; i<denominations.length; i++) {
		waysCount[i][0] = 1;
	}
	for(int i=0; i<sum; i++) {
		waysCount[0][i] = 0;
	}
	for(int i=1; i<=sum; i++) {
		for(int j=1; j<=denominations.length; j++) {
			if(i >= denominations[j]) {
				waysCount[j][i] = waysCount[j-1][i] + waysCount[j][i-denominations[j]];
			} else {
				waysCount[j][i] = waysCount[j-1][i];
			}
		}
	}
	return waysCount[denominations.length][sum];
}

--------------------------


//check if Set of non-negative numbers,contains a subset with given sum

isSubsetSum(arr, sum, n) = isSubsetSum(arr, sum - arr[n-1], n-1) || isSubsetSum(arr, sum, n-1)

for every number in set as i
T(sum,n) = T(sum-i, n-i) + T(sum, n-i)

if n=0, sum>0 , false
if sum=0 , true

printing all subsets can be done, as in case of LCS
*** https://www.geeksforgeeks.org/perfect-sum-problem-print-subsets-given-sum/

boolean setContainsSubsetWithSum(int set[], int sum) {
	boolean memo[][] = new boolean[set.length+1][sum+1];
	for(int i=0; i<=sum; i++) {
		memo[0][i] = false;
	}
	for(int i=0; i<=set.length; i++) {
		memo[i][0] = true;
	}
	for(int i=1; i<=set.length; i++) {
		for(int j=0; j<=sum; j++) {
			if(j < set[i]) {
				memo[i][j] = memo[i-1][j];
			} else {
				memo[i][j] = memo[i-1][j-set[i]] || memo[i-1][j];
			}
		}
	}
	for(int i=1; i<=set.length; i++) {
		if(memo[i][sum]) {
			return true;
		}
	}
	return false;
}

--------------------------

int goldMineProblem(int golds[][]) {
	int n = golds.length;
	int m = golds[0].length;
	int maxGolds[][] = new int[n][m];
	for(int j=0; j<m; j++) {
		for(int i=0; i<n; i++) {
			maxGolds[i][j] = getMaxGoldValue(i, j, golds);
		}
	}
	int max = 0;
	for(int i=0; i<n; i++) {
		if(max > maxGolds[i][m-1]) {
			max = maxGolds[i][m-1];
		}
	}
	return max;
}

private int getMaxGoldValue(int i, int j, int golds[][]) {
	int max1 = getValue(i-1,j-1,golds);
	int max2 = getValue(i-1,j,golds);
	int max3 = getValue(i-1,j+1,golds);
	if(max1 >= max2 && max1 >= max3) {
		return max1;
	} else if(max2 >= max1 && max2 >= max3) {
		return max2;
	} else {
		return max3;
	}
}

private int getValue(int i, int j, int golds[][]) {
	if(i<0 || j<0 || i>=golds.length || j>=golds[0].length) {
		return 0;
	}
	return golds[i][j];
}

--------------------------

Check if set Contains Sum Divisible By m
Approach 1:
//check if set contains sum divisible by m
//create boolean array of [0..m-1]
//save sum of every combination of elements as true in this array
//if 0th element is true, then subset found

Approach 2:
//create new array with modulus of each number and then do subset sum problem

--------------------------

Rod Cutting problem
cuts = 1, 2, 3, 4, 5, 6, 7, 8
values = 3, 5, 8, 9, 10, 17, 17, 20
Rod Length = 24

// for every cut length as i
// T(n,cuts) = MAX( T(n-i, cuts) )

int rodCutting(int price[], int cuts[], int n) {

	// all values in array are initially zero
	int[] cutsPrice = new int[n+1];

	for(int number = 1; number <= n; number++) {
		for(int cutIndex = 0; cutIndex < cuts.length; cutIndex++) {
			if(number >= cuts[cutIndex]) {
				cutsPrice[number] = Math.max( cutsPrice[number], cutsPrice[number-cuts[cutIndex]] + price[cutIndex] );
			}
		}
	}
	return cutsPrice[n];
}

--------------------------

Zero One KnapSack problem
WTs 	= 10, 20, 30
prices 	= 60, 100, 120
Weight of bag = 50

//bag of size 50 = 220
//bag of size 10 = 60
//bag of size 11 = 60

for every weight as i
T(n,weight) = MAX( T(n-i, weight-i) )

int zeroOneKnapSack(int weight[], int price[], int bagSize) {
	int memo[][] = new int[price.length+1][bagSize+1];
	int newWeight[] = new int[weight.length+1];
	int newPrice[] = new int[price.length+1];
	for(int i=1; i<newWeight.length; i++) {
		newWeight[i] = weight[i-1];
	}
	for(int i=1; i<newPrice.length; i++) {
		newPrice[i] = price[i-1];
	}
	for(int i=0; i<newPrice.length; i++) {
		for(int j=0; j<=bagSize; j++) {
			if(j >= newWeight[i]) {
				memo[i][j] = max(memo[i-1][j], memo[i-1][j-newWeight[i]] + newPrice[i]);
			}
		}
	}
	return memo[weight.length][bagSize];
}

--------------------------
if last characters are equal
	T(1->n, 1->m) = 1 + T(1->n-1, 1->m-1) 
else 
	T(1->n, 1->m) = 0

int longestCommonSubstring(char s1[], char s2[]) {
	int memo[][] = new memo[s1.length+1][s2.length+1];
	int maxLength = 0;
	for(int i=0; i<=s1.length; i++) {
		memo[i][0] = 0;
	}
	for(int i=0; i<=s2.length; i++) {
		memo[0][i] = 0;
	}
	for(int i=1; i<=s1.length; i++) {
		for(int j=1; j<=s2.length; j++) {
			if(s1[i-1] == s2[j-1]) {
				memo[i][j] = memo[i-1][j-1] + 1;
				if(maxLength > memo[i][j]) {
					maxLength = memo[i][j];
				}
			} else {
				memo[i][j] = 0;
			}
		}
	}
	return maxLength;
}

--------------------------
T(1->n, 1->m) = 1 + T(1->n-1, 1->m-1) if last characters are equal
T(1->n, 1->m) = MAX[ T(1->n, 1->m-1) , T(1->n-1, 1->m) ] if last characters are not equal

int longestCommonSubsequence(char s1[], char s2[]) {
	int memo[][] = new memo[s1.length+1][s2.length+1];
	for(int i=0; i<=s1.length; i++) {
		memo[i][0] = 0;
	}
	for(int i=0; i<=s2.length; i++) {
		memo[0][i] = 0;
	}
	for(int i=1; i<=s1.length; i++) {
		for(int j=1; j<=s2.length; j++) {
			if(s1[i-1] == s2[j-1]) {
				memo[i][j] = memo[i-1][j-1] + 1;
			} else {
				memo[i][j] = max(memo[i-1][j], memo[i][j-1]);
			}
		}
	}
	return memo[s1.length][s2.length];
}

--------------------------

//print longest increasing substring 
int longestIncreasingSubstring(int arr[]) {
	int max = 1;
	int maxEndingHere = 1;
	int maxStart = 0;
	int maxStartTemp = 0;
	int maxEnd = 0;
	for(int i=1; i<arr.length; i++) {
		if(arr[i] > arr[i-1]) {
			maxEndingHere++;
		} else {
			if(maxEndingHere > max) {
				max = maxEndingHere;
				maxEnd = i-1;
				maxStart = maxStartTemp;
			}
			maxEndingHere = 1;
			maxStartTemp = i;
		}
	}
	if(maxEndingHere > max) {
		max = maxEndingHere;
		maxEnd = arr.length-1;
		maxStart = maxStartTemp;
	}
	System.out.println(maxStart);
	System.out.println(maxEnd);
	return max;
}

--------------------------

// longest increasing subsequence

LIS - lis including current index (memoized array)
MAX - max lis found till now (variable)

Arr :	10, 22, 9, 33, 21, 50, 41, 60, 80

LIS :	1	2	1	3	2	4	4	5	6
MAX :	1	2	2	3	3	4	4	5	6


int longestIncreasingSubsequence(int arr[]) {
	int max = 1;
	int LIS[] = new int[arr.length];
	for(int i=0; i<LIS.length; i++) {
		LIS[i] = 1;
	}
	for(int i=1; i<arr.length; i++) {
		for(int j=i-1; j>=0; j--) {
			if(arr[i] > arr[j]) {
				LIS[i] = LIS[j] + 1;
				if(LIS[i] > max) {
					max = LIS[i];
				}
			}
		}
	}
	return max;
}

--------------------------
Longest Palindromic Subsequence

if arr[0] == arr[n-1]
	T(0->n-1) = 2 + T(1->n-2)
else
	T(0->n-1) = MAX( T(0->n-2), T(1->n-1) )


int longestPalindromicSubsequence(char arr[]) {
	int memo[][] = new int[arr.length][arr.length];
	for(int i=0; i<arr.length; i++) {
		for(int j=0; j<=i; j++) {
			memo[i][j] = 1;
		}
	}
	for(int i=0; i<arr.length; i++) {
		for(int j=i+1; j<arr.length; j++) {
			if(arr[i] == arr[j]) {
				memo[i][j] = 2 + memo[i-1][j-1];
			} else {
				memo[i][j] = Math.max( memo[i][j-1], memo[i-1][j] );
			}
		}
	}
	return memo[0][arr.length-1];
}


--------------------------

Longest Palindromic Substring

if arr[0] == arr[n-1]
	T(0->n-1) = 2 + T(1->n-2)
else
	T(0->n-1) = 0


int longestPalindromicSubsequence(char arr[]) {
	int memo[][] = new int[arr.length][arr.length];
	for(int i=0; i<arr.length; i++) {
		for(int j=0; j<=i; j++) {
			memo[i][j] = 1;
		}
	}
	int max = 1;
	for(int i=0; i<arr.length; i++) {
		for(int j=i+1; j<arr.length; j++) {
			if(arr[i] == arr[j]) {
				memo[i][j] = 2 + memo[i-1][j-1];
				if(max < memo[i][j]) {
					max = memo[i][j];
				}
			} else {
				memo[i][j] = 0;
			}
		}
	}
	return max;
}

--------------------------

Edit Distance

T(n,m)
arr1(1->n), arr2(1->m)

insert, remove, replace

if arr1[n] == arr2[m]
	return T(n-1, m-1)
return MIN[ T(n, m-1) , T(n-1, m) , T(n-1, m-1) ]
				|			|			|
			 insert		remove		replace

--------------------------
