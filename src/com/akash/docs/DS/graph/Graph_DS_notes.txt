Graph_notes

Important links :
https://www.quora.com/Why-are-Depth-First-Search-and-Breadth-First-Search-called-so
http://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e
https://github.com/google/guava/tree/master/guava/src/com/google/common/graph

http://www.geeksforgeeks.org/bridge-in-a-graph/
http://stackoverflow.com/questions/28917290/how-can-i-find-bridges-in-an-undirected-graph
http://stackoverflow.com/questions/11218746/bridges-in-a-connected-graph


**https://github.com/sherxon/AlgoDS/blob/master/README.md

**http://www.techiedelight.com/graphs-interview-questions/
------------------------

undirected graph terminologies :

=>adjacent vertices : vertices joined by an edge
=>degree : no of edges connected to a vertex
=>sum of degree of all vertices = 2 * (no. of edges)
=>Path : a sequence of vertices v1,v2,...vn where vi and vi+1 has an edge
=>simple path, cyclic path
=>connected graph : every two vertices must have a path
=>Subgraph : a graph having subset of vertices and subset of edges
=>Maximum connected subgraph : a subgraph, in which if you add a vertex , you cannot get a connected subgraph
=>Tree (free tree) : connected subgraph without cycles, different from Tree DS as they have no root node.
=>Forest : collection of trees
=>Complete graph : there is an edge bw every pair of vertices
	How many edges in a complete graph : nC2 = n*(n-1)/2
	How many edges in a complete directed graph : 2 * nC2 = n*(n-1)
	As max value of no of edges, m <= n*pow(2) , log(m) <= 2*log(n)
	log(m) ~ log(n)
=>Minimum no of edges required to make a graph connected = n-1
=>Spanning tree : Tree that contains all vertices
				i.e. Connected subgraph that contains all vertices without cycle

Difference bw Complete and Connected graph
=>Complete graph : every two vertices must have an edge
=>connected graph : every two vertices must have a path
=>Parallel edge : 
	Two edges are parallel if they connect the same nodes in the same order (if any),
 	and antiparallel if they connect the same nodes in the opposite order. 
 	(Undirected edges cannot be antiparallel.)
=>multigraphs : graphs with parallel edges


Data structures for graphs :

Operations of Graph DS :
->add a vertex
->add an edge
->check if vertex exists
->check if edge exists bw two vertices
->check if graph is connected
->count no of vertices
->count no of edges
->get minimum distance(count of edges OR weight sum) from one vertex to another vertex


1) Edge list
unordered list of vertices and edges
simple to implement
inefficient when finding an edge bw two given vertices

2) Traditional Adjacency list :
vertices are kept in an array.
vertices point to a linked list of vertices that they are edged with.
There can be two kinds of adjacency list, IN and OUT. 

3)Modern adjacency list :
its a combination of above 2 approaches
Vertices contain a list of IN and OUT going edges
There is also an unordered list of edges, and the adjacency list of vertex point to edge in edge list.

4)Matrix representation:
V x V matrix for storing weight of the edge OR can be taken as boolean in case weightless graph.
Adding new vertex is costly, as 2D matrix is stored in a linear way in computer memory,
so we need to copy and create a new one.




BFS :

If graph is considered as tree (root node is considered as starting point node), then bfs:
->traverses over each level of tree one by one (nodes at same level)
->nodes at a distance of 1 edge distance are covered first
->BFS can be implemented as Queue
->The result of BFS is a spanning tree started from node S, such that
spanning tree has minimum path length from node S to any other node.

BFS requires that each node must have 3 more properties other that a normal graph vertex:
1)color		: discovered with processed,undiscovered,discovered with unprocessed
2)parent	: backtrack and get path from any node to S
3)distance	: determines minimum distance from source to any node

Algo :

	BFS(src) {
		src.color = GRAY
		src.parent = nil
		src.distance = 0
		Q <= src
		While(Q is not empty) {
			qNode <= Q
			for all tempNode adjacent to qNode {
				if(tempNode.color == WHITE) {
					tempNode.color = GRAY
					tempNode.parent = qNode
					tempNode.distance = qNode.distance+1
					Q <= tempNode
				}
			}
			qNode.color = BLACK
		}
	}

Time complexity for BFS = O(V+E)
for a Connected graph, E >= V-1 , then it is equivalent to O(E)
http://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e
proof:
=> v1 + (incident edges) + v2 + (incident edges) + .... + vn + (incident edges)
=> (v1 + v2 + ... + vn) + [(incident_edges v1) + (incident_edges v2) + ... + (incident_edges vn)]
=> O(V) + O(E)
=> O(V+E)

Breadth First Tree

Applications of BFS :
1)We can calculate shortest distance from a source vertex to every other vertex.

2)Get no of connected components

	Solution 1 :
	Do BFS from each node and mark them with a component number.
	color can be used to check if they are visited or not.
	Note: 	Do not check a node, if it is already processed for BFS.
			Take an array of nodes and mark them as processed or not processed
			(taking node and its status in a pojo).
			This will reduce complexity from O(n2) to O(n)
	
	Solution 2 :
	Do DFS on graph
	No need to take extra flag, as DFS already uses visited flag for each node.
	
		GetConnectedComponents() {
			connectedComponents = 0
			nodeList = getAllNodes();
			for all tempNode in nodeList {
				if(!tempNode.visited) {
					connectedComponents++
					DFS(tempNode)
				}
			}
			return connectedComponents;
		}
		
	time complexity = O(V+E)
	
(Q)Find the number of islands 
->connected components


3)Bipartite graph :

k-partite graph :
	A k-partite graph is a graph whose graph vertices can be partitioned into k disjoint sets so that
	 no two vertices within the same set are adjacent.
	A graph that can be colored with k colors, so that no two endpoints of an edge have the same color.

K=2 is bipartite

A graph is Bipartite if,
Every edge has one vertex in set U and other vertex in set W, such that 
U union W = Vertices
U intersection W = nil

(Q) There is a party of friends with 2 tables provided.
Arrange people in these two tables such that, people on a single table know each other.

Go for a BFS, For a connected graph, graph has no edge in same level during BFS.
If a graph has an edge in same level then it has an odd cycle.
If a graph has an odd cycle, then it is not bipartite.
Level of node can be calculated from distance parameter of node.

Algo 1:(graph having odd cycle is not bipartite)
	
	isBipartiteGraph() {
		nodeList = getAllNodes();
		for all tempNode in nodeList {
			tempNode.distance=0
		}
		for all tempNode in nodeList {
			if(tempNode.distance==0) {
				if( !isBipartite(tempNode) ) {
					return false
				}
			}
		}
		return true
	}

	isBipartite(src) {
		src.color = GRAY
		src.distance = 0
		Q <= src
		While(Q is not empty) {
			qNode <= Q
			for all tempNode adjacent to qNode {
				if(tempNode.color == WHITE) {
					tempNode.color = GRAY
					tempNode.distance = qNode.distance+1
					Q <= tempNode
				}
				else if(tempNode.distance == qNode.distance) {
					return false
				}
			}
			qNode.color = BLACK
		}
		return true
	}


Algo 2 : Coloring method(graph having odd cycle is not bipartite)

	Take a source node, mark it RED and do BFS
	Color all children of RED as BLUE
	Color all children of BLUE as RED
	stop when all vertices are scanned
	If any edge has same color vertex, then graph is not bipartite
	else graph is bipartite
	

=>Diameter of BFS = maximum distance bw two vertices in G
=>Distance bw two vertices = length of shortest path bw two vertices

	get Diameter for one BFS result :
	->Do BFS
	->get max level value in graph, say n
	->now get max level value in graph less than n, say m
	->diameter = n+m

	->If we want to determine exact diameter of a graph, then we need to perform BFS from every node.
	time complexity for this = O(E*V)
	
	->We can apply all pairs shortest path algo

Diameter(G) <= 2*(max level no in any BFS)


==>Eulerian path and circuit for undirected graph

Eulerian path (trial) 	: which visits every edge exactly once
Eulerian cycle 			: Eulerian path which starts and ends on the same vertex
semi-Eulerian			: A graph that has an Eulerian path but not an Eulerian cycle

Is it possible to draw a given graph without lifting pencil from the paper and without tracing any of the edges more than once.

Euler stated without any proof that a necessary condition for the existence of Eulerian circuits
 is that all vertices in the graph have an even degree.

Carl Hierholzer proved that for the existence of Eulerian trails it is necessary that zero or two vertices have an odd degree.

(Q)Given a graph G, has G Eulerian path? (undirected graph)
Solution :
	->check if graph is connected
	->if yes then
	->count of vertices with odd degree must be 0 or 2
	->if yes, then graph has eulerian path.
	
(Q)Given a graph G, has G Eulerian cycle? (undirected graph)
	->check if graph is connected
	->if yes then
	->count of vertices with odd degree must be 0
	->if yes, then graph has eulerian cycle.
	
(Q)Given a Eulerian graph G, print Eulerian path.(undirected graph)
	->check if graph has eulerian path
	->if yes, then if graph has any odd degree vertex start from there, 
			else start from any vertex
	->when you find single edge from a vertex, 
		traverse that edge and remove that edge
	->when you find more than one edge from a vertex,
		choose that edge which is not a bridge
		traverse that edge and remove that edge
	->use DFS/BFS to check if an edge is a bridge
	
	time complexity of above algo = O(E to the power 2)
	
	(Q)How to check if an edge is a bridge during eulerian path traversal.
		Solution 1 : (BFS) check no of connected components
					 if number increased after edge removal
					 then this edge is bridge edge
					 
		Solution 2 : (DFS) To check if (u-v) is a bridge edge using DFS
	
(Q) Given a Directed Graph G, has G Eulerian cycle? (Hierholzer�s Algorithm)
	->check if G is Strongly Connected Component.(there is a path bw every pair of ordered vertices)
	->For every edge, in-degree(u) = out-degree(u)
	

=>seven bridges of konigsberg problem :
If there is a graph G(V,E) , and a user must travel to all nodes without using any edge more than once.

Solution : This can be possible if each vertex have an even degree.



Hamiltonian path	: that visits each vertex exactly once
Hamiltonian cycle 	: Hamiltonian path which is a cycle

(Q)check if a graph has Hamiltonian path


===========================

Depth First Search(DFS) :

DFS can be done on any path of the graph.
There can be many DFS tree possibilities from a single node.
There can be a possibility that, DFS tree has a longer path bw two nodes as compared to its shortest path.
We store a timestamp of every node.
Every node has two timestamp stored :
	->start_timestamp = time at which node was monitored first.
	->end_timestamp = time at which no further route was found and backtracked.
Stack or Recursion is used to implement DFS.
Path formed by DFS is called DFS tree.
There are only two types of edges in DFS undirected graphs :
	->tree edges
	->back edges : An edge from a node to its ancestor
A back edge can have a shorter path bw two nodes as compared to tree edges.


DFS Algo :
DFS can be implemented by using recursion or by stack.

We will use three properties for a node in DFS:
boolean visited		v
int arrival_time	a
int departure_time	d

	time=0;
	DFS(node) {
		node.v=true;
		node.a=time++;
		for all w adjacent to node {
			If (!w.v) {
				DFS(w);
			}
		}
		node.d=time++;
	}
	
	time complexity = O(V+E)

property of a DFS in undirected graph :
	tree edge (u ---> v)
		arr[u] < arr[v]
		dep[u] > dep[v]
		
	back edge (u ---> v)
		arr[u] > arr[v]
		dep[u] < dep[v]

=======
Bridge Edge :
http://www.geeksforgeeks.org/bridge-in-a-graph/
http://stackoverflow.com/questions/28917290/how-can-i-find-bridges-in-an-undirected-graph
http://stackoverflow.com/questions/11218746/bridges-in-a-connected-graph


2 Edge Connected :
A graph is 2 edge connected if and only if, you remove an edge from graph and it is still connected.

Bridge edge : an edge which if removed, then the graph is not connected.
We just need to find out if there is any bridge edge in a graph

solution 1 : 
Remove each edge and check if there is any increase in no of connected components,
If it increases by 1, then removed edge is a bridge edge.

solution 2 :
When backtracking from a node v, 
We need to ensure that there is a back edge from some descendent of v to some ancestor of v.
descendent of v also includes v itself.

There can be many back edges from descendent of v to ancestor of v, 
but we should be interested in Deepest back edge.
Deepest Back Edge : 
A back edge whose ancestor arrival time is minimum (i.e. edge goes top of the tree).

**
Every node asks its descendent to tell about the deepest back edge.
deepest back edge means, a back edge that goes deepest to the root.
this helps every parent node to get its DBE by its child subgraph.

variable used in algo :
dbe = deepest back edge
dbe[v] = earliest visited vertex reachable from subtree rooted with v.

for every node we will have following DS:
->arrival_time
->dpe
->parent
->visited

Algo :

	time=0;
	2EC(node) {
		arr[node]=time++;
		visited[node]=true;
		dbe[node]=arr[node];
		For all w adjacent to node do {
			if(!visited[w]) {
				parent[w]=node;
				2EC(w);
				dbe[node] = min(dbe[w], dbe[node]);
				if(dbe[w] > arr[node]) {
					"This is a back edge";
				}
			} else if(parent[node] != w) {
				dbe[node] = min(dbe[node], arr[w]);
			}
		}
	}

http://www.geeksforgeeks.org/bridge-in-a-graph/

for an edge u--v
u.arr is the arrival time of a node u via DFS tree
initially u.dbe is considered as u.arr,
but if there is any path other that DFS tree such that it reaches to this node u
having u.arr > u.dbe
then there is a cycle and in this cycle there can be no bridge edge

Two errors in this algo:
->We must not consider dbe for Tree edge (in case of undirected graph, u --> v and v --> u both are same)
->The node from which DFS will start, will have a dbe = arr of that node.


(Q)Given a graph G, is G a planar graph?

Planar graph : a graph whose vertices and edges are on same plane and no two edge intersect each other.

Complete graph on 5 vertices, is not a planar graph.

Theorem 1 : |V| >= 3 and |E| > 3|V| - 6
			G is not planar
Theorem 2 : G has no circuit of length 3
			|E| > 2|V| - 4
			G is not planar

(Q)2 Vertex connected graph, Articulation Points (or Cut Vertices) in a Graph :
If we remove a vertex from a graph, the graph must be connected.

Algo :
In DFS tree, a vertex u is articulation point if one of the following two conditions is true.
1) u is root of DFS tree and it has at least two children.
2) u is not root of DFS tree and it has a child v such that
 no vertex in subtree rooted with v has a back edge to one of the ancestors (in DFS tree) of u.


for every node we will have following DS:
->arrival_time
->dpe
->parent
->visited

Algo :

	time=0;
	AP(node) {
		children = 0;
		arr[node] = time++;
		visited[node] = true;
		dbe[node] = arr[node];
		For all w adjacent to node do {
			if(!visited[w]) {
				children++;
				parent[w] = node;
				AP(w);
				dbe[node] = min(dbe[w], dbe[node]);
				if(parent[node] == null && children > 1) {
					"node is articulation vertex";
				}
				if(parent[node] != null && dbe[w] >= arr[node]) {
					"node is articulation vertex";
				}
			} else if(parent[node] != w) {
				dbe[node] = min(dbe[node], arr[w]);
			}
		}
	}
	

=>K vertex connected
=>K edge connected

(Q)Given an undirected graph G, is G a Biconnected graph?
-> graph with vertex connectivity greater than 1.
-> It is a connected graph on two or more vertices having no articulation vertices
A graph is Biconnected graph if :
	1. It is a connected graph
	2. It has no articulation point

===============================

DFS for Directed Graph :

Types of edges :
Forward
Back
Tree
Cross

For cross edge (u,v) :  	arr[u] < dep[u] < arr[v] < dep[v]

For Forward edge (u,v) : 	arr[u] < arr[v]
							dep[u] > dep[v]
								OR
							arr[u] < arr[v] < dep[v] < dep[u]
							
For Back edge (u,v) :		arr[u] > arr[v]
							dep[u] < dep[v]
								OR
							arr[v] < arr[u] < dep[u] < dep[v]
							
For Tree edge (u,v) :		arr[u] < arr[v]
							dep[u] > dep[v]
								OR
							arr[u] < arr[v] < dep[v] < dep[u] (similar to Forward Edge)
							
if(arr[u]>arr[v] && dep[v]==null) {
	"back edge exists"
}

(Q)If there is no back edge in DFS of a directed graph G,
   does that mean it is acyclic ?
   
No Back Edge === No Cycle

=>Detect cycle in a graph (directed or undirected)
check if there is any back edge in a graph

solution 1 : go for complete DFS, and then check if there is an edge (u,v) 
		where dep_time[u] > dep_time[v]
		
solution 2 : find back edge (if exists) during DFS
		for any edge (u,v) during DFS,
		if(v.visited == true && dep_time[v] == null)
			then (u,v) is back edge

Ans: 
1)Do a DFS
2)Order vertices of graph in departure time

All edges except back edge will be moving from lower value to higher value in dep time.
This ordering is also called as topological sort.  

Statement :
Given an acyclic graph G, ordering of vertices in their departure time is called Topological sort.   
 
Topological sort : sorting vertices on the basis of departure timestamp (larger to smaller)
	(this can be done while performing DFS just to avoid complexity of sorting)

(Q) Given all maven dependencies in a transitive manner,
check if there is a cyclic dependency or not?
If no cyclic dependency then print the order of downloading jars?
ex :
A requires B
B requires C
D requires E
E requires C

Output : No cycle , order of download : [C, E, D, B, A]
HINT : check DAG and use topological sort


DAG : Directed Acyclic Graph
(Q) Given a Directed graph G, check if G is Acyclic?
	-> No back edge means no cycle
	-> Coloring method in DFS (White, Gray, Black)
		-- coloring method is similar to below check 
		--vertex (u,v) if( v.visited == true && dep_time[v] == null)
(Q) Given an Undirected graph G, check if G is Acyclic?
	-> No back edge means no cycle
	-> Use find-union disjoint set	
	
	
(Q) Detect Cycle in a directed graph using colors (Coloring method in DFS)
(Q) Print all the cycles in an undirected graph		

=>In undirected Graph : 
Connected Graph = There is a path bw every pair of vertices.

=>In Directed Graph:
Strongly Connected Graph = There is a path bw every ordered pair of vertices.

for a strongly connected graph , no of edges = 2 * nC2 = n(n-1) 

=>Weakly connected Directed graph:
	There is a path between every two vertices either in one or in both directions.
	
(Q)Given a directed Graph G, is G a strongly connected graph?

solution1=>
Do DFS from every vertex and it should cover all the vertices in every DFS.

complexity = O(m*n)

solution2=>

statement1 : From DFS we deduce that there exists a path from vertex V to every other vertex.
statement2 : There exists a path from every other vertex to V.

If both statement1 and statement2 are correct than, graph is strongly connected.

	path from V --> X
	path from V --> Y
	
	path from X --> V
	path from Y --> V
	
	hence
	path from X --> Y
	path from Y --> X

		1. Do DFS on arbitrary vertex V
		2. if above DFS does not visit all nodes then abort
		3. Do reverse edges in G 
		4. Do DFS from V in reversed G (DFS on reversed G can also be done by doing DFS on InAdjacency edges)
		5. If all vertices are connected in both DFS, then graph is strongly connected

Solution3=>

	Lets try to solve this problem with only one DFS.
	
	For a directed graph, if a subtree has an out edge, either back edge or cross edge,
	then this subtree has some path from which it can go outside.
	
	The necessary and sufficient condition for a subtree to be strongly connected is 
	they must have an edge going out of that subtree.
	(for a subtree if no edge goes out, then edges are only incoming and no outgoing path available)
	
	Arrival time of cross edge or back edge is small at destination vertex.
	
	We need to modify our DFS as in case of 2EC.
	Every DFS program will return minimum arrival time value to which its descendent are reachable.

		time=0;
		SC(node) {
			arr[node]=time++;
			visited[node]=1;
			minArrTime=arr[node];
			for w adjacent to node do {
				if(!visited[w]) {
					minArrTime = min(minArrTime,SC(w));
				} else {
					minArrTime=min(minArrTime,arr[w]);
				}
			}
			if(minArrTime==arr[node]) {
				if(not the root vertex of graph) {
					STOP
					Graph is not strongly connected
				}
			}
		}


=>Strongly Connected Component 
	A directed graph is strongly connected if there is a path between all pairs of vertices.
	A strongly connected component of a directed graph is a maximal strongly connected subgraph
(Q) print all strongly connected components of a directed graph.

1. Call DFS(G) to compute finishing times f[u] for all u.
2. Compute GT, transpose of G
3. Call DFS(GT), but in the main loop, consider vertices in order of decreasing f[u] (as computed in first DFS)
4. Output the vertices in each tree of the depth-first forest formed in second DFS as a separate SCC.

the finish time of a vertex that connects to other SCCs (other that its own SCC),
 will always be greater than finish time of vertices in the other SCC

(Q) Number of groups formed in a graph of friends

http://www.personal.kent.edu/~rmuhamma/Algorithms/MyAlgorithms/GraphAlgor/strongComponent.htm

------------------------------------------

Applications of BFS :
1.Connected Components
2.Bipartite graph

Applications of DFS in undirected graph :
1. Connected Components
2. Two Edge Connected	-- Bridge edge
3. Vertex connected		-- Articulation point
4. Planar graph

Applications of DFS in Directed graph :
1. Acyclic
2. Topological sort
3. Strongly Connected graph
4. Strongly Connected Component

All above applications have linear time complexity.

Euler path and Euler Cycle
	->connected components
	->bridge edge

===============================================
(1) diameter of a graph
	
(2) print eulerian path, how to check if an edge is bridge
	http://www.geeksforgeeks.org/eulerian-path-and-circuit/
	http://www.geeksforgeeks.org/euler-circuit-directed-graph/
	http://www.geeksforgeeks.org/fleurys-algorithm-for-printing-eulerian-path/
	http://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/
(3) check if a graph is 2 edge connected
	http://www.geeksforgeeks.org/biconnectivity-in-a-graph/
	http://www.geeksforgeeks.org/bridge-in-a-graph/
(4) strongly connected directed graph
	http://www.geeksforgeeks.org/connectivity-in-a-directed-graph/
	http://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/
(5) Bipartite problem :
	http://www.geeksforgeeks.org/maximum-bipartite-matching/
(6) All pair shortest path problem (floyd-warshall-algorithm)
(7) single source shortest distances in O(VE) ,Bellman�Ford Algorithm
(8) graph with no negative weights,single source shortest distances in O(E + VLogV) time, 
	Dijkstra�s algorithm
(9) Shortest Path in DAG
(10) All pair shortest path
(11) Transitive closure
(12) Kruskal's MST
(13) Prims's MST

(14) Determine whether a given graph contains Hamiltonian Cycle or not.
	If yes, then print the path.
===============================================

Minimum spanning tree :

tree = Connected subgraph WITHOUT CYCLES
spanning = it should cover all vertices

MST = a spanning tree which has minimum length or weight

Kruskal MST :

1. sort edges on the basis of their length
2. take empty tree T
3. for every edge from the sorted list
	if this edge do not make a cycle in T then add this edge to T
	
(Q)How to check if tree has a cycle while adding an edge ?
Ans : 
make set of all connected components
when you add an edge without creating a cycle, then no of components get reduced by 1.
i.e. Union of edge and set of edges in a component must reduce final set of components by 1.

------------------


Spanning Tree :
Tree : connected subgraph without any cycle
spanning : it should include all vertices

Spanning tree has n-1 edges

Minimum spanning tree : spanning tree with minimum weight

length of spanning tree = sum of length of all edges in the tree

=>Kruskal Algorithm for minimum spanning tree :

Greedy approach:
make the best available choice

take the edge with smallest edge length

Algo :
1. Sort edges in increasing order of length 
2. take tree, T = empty
3. for(i=0;i<n;i++)
4  	if( {ei} U T  is a tree ) then
5. 		T <- T U {ei}


(Q) Is the MST unique?
Ans: Yes if edge lengths are unique
     no otherwise.
	 
(Q) How do we check if a cycle is formed if an edge e=(u,v) is included?

Cycle is formed if u and v are already connected.
u and v are in same connected component.
If we include an edge to make a spanning tree (i.e without making any cycle),
the no of connected components will be reduced by 1.

vertices in a component are maintained as sets
eg: {a,b,c} {d,e} {f} are 3 connected components.

We will be doing two main operations:
->check if 2 vertices are in same set or not
->merge components of 2 vertices

Initially we have n connected components
In the end we have 1 connected component

Algo :
1. T <- empty
2. Sort edges in the order of length
3. for i=1 to m do 
4. let ei = (u,v)
5. if( find(u) != find(v)) then
6. 		T <- T U {ei}
7.		Union(find(u), find(v))

n vertices and m edges in the graph :
no of unions = n-1		--> U
no of finds = 2m		--> F

Total running time = O( mlog(m) + U.n + F.m )

=>Find Union Data structure :

This Data Structure is used to maintain a collection of disjoint sets. 
Initially lets assume that no vertices are connected.
vertices will be representing sets.
Graph will have n vertices , n connected components and n different sets.
We can add an edge in graph only when both their vertices are in different sets/tree.

Find operation : of a node will return reference of top node of that tree.
Union operation : will join two different sets nodes.

Find(x)
Union(x,y)

=>Union by Rank : 

while making union of two trees, the tree with less no of nodes will point to tree with more no of nodes.
-->Imp property :
A tree in find union operation (union by rank) with n nodes has a height of AT MOST log n

union operation will take : O(1) time
find operation will take : O(log n) time

=>Union by Height : 

while making union of two trees, the tree with less height will point to tree with more height.

-->Imp property :
A tree in find union operation (union by height) with height h must have at least 2*pow(h) nodes

union operation will take : O(1) time
find operation will take : O(log n) time

Total running time for Kruskal Algo = O( mlog(m) + n + mlog(n) ) = O(mlog(n))

As m <= n*pow(2) , log(m) <= 2*log(n)

=>Path Compression in Union Find:

This technique is used to make future finds easier.
Resetting parent for all nodes in the path traversal to the parent of tree so that future finds are easier.
This can only be implemented in Union by Rank and not in union by height, as we are changing heights.

(Q)Find the number of islands
(Q)Detect Cycle in an Undirected Graph
(Q)Tarjan�s off-line lowest common ancestors algorithm
(Q)Job Sequencing Problem

====================================
Find Union Disjoint set data structure:

class FindUnionSet {
	N node;
	int rank;
	FindUnionSet parent;
}

void mst() {
	Map<N,FindUnionSet> fuSets = new HashMap<>(nodes.length());
	for(N node : nodes()) {
		fuSets.put(node, new FindUnionSet(node, 1, null));
	}
	for(Edge<N,E> edge : edges()) {
		N srcParent = find(fuSets, edge.getSource())
		N destParent = find(fuSets, edge.getDestination())
		if(!destParent.equals(srcParent)) {
			union(fuSets, srcParent, destParent)
		}
	}
}

N find(Map<N,FindUnionSet> fuSets, N node) {
	FindUnionSet fuSet = fuSets.get(node);
	FindUnionSet temp = fuSet
	while(temp.getParent() != null) {
		temp = temp.getParent();
	}
	fuset.parent = temp;
	return temp.getNode();
}

void union(Map<N,FindUnionSet> fuSets, N src, N dest) {
	N srcParent = find(fuSets, src);
	N destParent = find(fuSets, dest);
	FindUnionSet fuSrc = fuSets.get(srcParent);
	FindUnionSet fuDest = fuSets.get(destParent);
	if(fuSrc.getRank() > fuDest.getRank()) {
		fuDest.setParent(fuSrc);
		fuSrc.setRank(fuSrc.getRank()+fuDest.getRank());
	} else {
		fuSrc.setParent(fuDest);
		fuDest.setRank(fuSrc.getRank()+fuDest.getRank());
	}
}

=====================================

Prims Algorithm:

MST is defined only for undirected graphs.
A cut in Graph G , is a partition of vertices set into 2 parts.

No. of cuts in a graph = 2*pow(n-1) - 1

{a,b} {c,d,e}
{a} {b,c,d,e}

Edges that goes from one to cut to another are called as Edges in the Cut(Edges of the Cut).
For any cut (S,S') the minimum of all edges of a Cut will be a part of MST.
There might be a case where, more than one edge of any cut can be a part of MST.

Prims Algo : 
1. Start from a single vertex.
2. Take that single vertex in one set and all other vertices in other set of the cut.
3. find minimum edge of the cut
4. include that edge in MST
5. take vertices of this edge in same set and GO to step 3
6. repeat until all vertices are in same set.


take two sets of vertices and take min edge of the cut
A boolean variable can be used to differentiate the set

Naive approach :
search for all edges from S to S' which are edge of the cut and find minimum.

Better Approach :
Lets consider that, a node v is added from S' to S.
hence in the next case, we will not consider edges of the cut which are not incident to v.
For this , we can take heap.
finding minimum edge at every step and then removing incident edges of v in the heap 
and adding outgoing edges of v to the heap.

Algo :

S is an array
S[v] = 1 if v is in Set 
S[v] = 0 if v is not in Set

For all vertices v set S[v] = 0
setting 1 for any root node
S[r]=1

For all edges e incident to r do {
	Heap.insert(e)
}

while(!Heap.isEmpty()) {
	edge minEdge = heap.findMin();
	print(minEdge)
	let v be the endpoint of minEdge
	if(S[v] == 0) {
		for all e1 = (v,w) adjacent to v do {
			if(S[w] == 0) {
				Heap.insert(e1);
			} else {
				Heap.delete(e1);
			}
		}
		S[v] = 1;
	}
}


Modified Prim's algorithm:

Instead of making a heap of edges we will take a heap of label of vertex.
Every vertex in S' must contain a label value that determines path length of edge from S' to S.
If there is no edge, then label is INFINITY.

We will be only updating label values of vertices in heap
i.e. decrease priority of vertices in heap
Heap will contain only those vertices that are S'


Each vertex will have below properties :
-> key
-> parent

int INF = Integer.maxInt;

prim() {
	for each vertex v in graph {
		v.key = INF;
		v.parent = null;
	}
	//any vertex
	root.key = 0;
	add all vertices to heap (min priority queue) by their key priority
	
	while(heap.isNotEmpty()) {
		Vertex tempNode = heap.extractMin();
		for each adjacent vertex of tempNode as u {
			if( heap.contains(u) && w(tempNode,u) < u.key ) {
				u.key = w(tempNode,u);
				u.parent = tempNode;
				heap.heapify(u);
			}
		}
	}
}

Complexity = E*log(V)

=================================================

==>Single Source Shortest path:
Determine shortest path from a given vertex S to another given vertex T.

We can use SSSP in both directed and undirected graphs.

To determine shortest path b/w two vertices we can determine all the paths and get shortest of them.
But this may lead to a solution of 2pow(n)

=>Property of Shortest path in graphs :
If shortest path from S to T has a vertex X, then this path also contains shortest path from S to X.

We will compute the shortest path from S to every other vertex in G.

According to Dijkstra algo :

We will divide all the vertices in two sets:
Set S  					-> contains vertices whose exact distance from vertex s has been found
Set S' (S compliment) 	-> contains vertices whose exact distance from vertex s has not been found yet,
							we only know the upper bound of distance from vertex s

For all vertices v in S' ,
d[v] = is an upper bound on the length of the shortest path from s to v

For all vertices v in S ,
d[v] = is the length of the shortest path from s to v

Correctness of Dijkstra Algo:

let u be a vertex in S'
d[u] = length of shortest path from s to u that includes only vertices from S except u


-----------------


The breadth-first-search algorithm is a shortest-paths algorithm that works 
on unweighted graphs, that is, graphs in which each edge has unit weight.

=>Optimal substructure of a shortest path
Shortest-paths algorithms typically rely on the property that a shortest path 
between two vertices contains other shortest paths within it.

Dijkstra�s algorithm is a greedy algorithm.
Floyd-Warshall algorithm: (all pairs shortest paths) is a dynamic-programming algorithm.

If the graph contains a negative-weight cycle reachable from s,then shortest-path weights are not well defined.

(Q) Can a shortest path contain a cycle?
A cycle can be of weight 0, +ve or -ve.
a shortest path cannot contain a cycle.
shortest path can have atmost V-1 edges.

intialize_all_nodes(G, s) {
	for all vertices v in Graph {
		v.distance = INFINITE;
		v.parent = null;
	}
	s.distance=0;
}

relax(u, v, w) {
	if(v.distance > u.distance + w(u,v)) {
		v.distance = u.distance + w(u,v);
		v.parent = u;
	}
}

=>bellman ford : O(VE), considering negative-weight cycle.
{
	intialize_all_nodes();
	for(int i=0; i<v-1; i++) {
		for all edges (u,v)		// mark processed edges
			relax(u, v, w)
	}
	for all edges (u,v)
		if(v.d > u.d + w(u,v))
			return false;
	return true;
}

->property : if shortest path from s to v has n edges, then edges need to relaxed atmost n times.

=>Single source shortest path for Directed Acyclic graph

(DAG) Directed graph having no cycle means there is no back edge.
Tree, forward and cross edges exist.

topological sort SSSP : O(V + E),  considering a graph having negative edge but no negative-weight cycle.
{
	do dfs and perform topological sort (larger to smaller departure time)
	intialize_all_nodes();
	for vertices u in sorted order
		for all adjacent edges of u (u,v)		// mark processed edges
			relax(u,v,w)
}

topological sort can be done in O(V + E), during DFS we can store vertices of their departure time.

=>Dijkstra Algorithm : considering a graph having no negative edge. O(E * log(V))
->greedy approach
{
	intialize_all_nodes();
	create_min_heap(for all V by distance)
	S = empty set
	while(heap is not empty) {
		u = extract_min_heap();
		for(all adjacent edges of u (u,v)) {		// mark processed edges
			relax(u,v,w)
			heap.heapify(v);
		}
		S = S Union u
	}
}

//for marking processed edges
private Set<Edge<N>, Boolean> visited;

It is quite similar to prims algorithm, where we also take 2 sets.
S' in prims algo contains vertices having a value d , 
as minimum edge of all the edges from S to that vertex.

Dijkstra�s algorithm maintains a set S of vertices whose final shortest-path
weights from the source s have already been determined. The algorithm repeatedly
selects the vertex u from {V - S} with the minimum shortest-path estimate, adds u
to S, and relaxes all edges leaving u. In the following implementation, we use a
min-priority queue Q of vertices, keyed by their d values.

----------------------------------------------

All pair shortest path probem :

->This algo works only for matrix representation of graph

path(i,j) = min{ path(i,k) + w(k,j) }

We need to maintain two matrices for this algo.
->1st for calculating distance from every vertex to every other vertex
	D[i][j]
->2nd for calculating actual path from every vertex to every other vertex.
	P[i][j]

Initially, 
D[i][j] = 0 if i=j
D[i][j] = INF if there is no edge from i to j

P[i][j] = i if there is an edge from i to j
P[i][j] = NULL if there is no edge from i to j

floydWarshal(G) {
	for(int k=0; k<V; k++) {
		for(int i=0; i<V; i++) {
			for(int j=0; j<V; j++) {
				if(D[i][k]+D[k][j] < D[i][j]) {
					D[i][j] = D[i][k] + D[k][j];
					P[i][j] = k;
				}
			}
		}
	}
}


(Q) 2D matrix of 1 and 0 of NxM,
convert 0 to 1 , if that 0 is neighbour of 1.
How many times it would take to make all nodes as 1.
definition of neighbor is left, right, top, bottom.


----------------------------------------------

Transitive Closure of a Graph:

It is a 2D matrix which has following property:
-> T[i][j] = 0 , if there is no path from i to j vertex
-> T[i][j] = 1 , if there is a path from i to j vertex

Initially,
T[i][j] = 1 if there is an edge from i to j
T[i][j] = 0 if there is no edge from i to j

transitiveClosure(G) {
	for(int k=0; k<V; k++) {
		for(int i=0; i<V; i++) {
			for(int j=0; j<V; j++) {
				T[i][j] = T[i][j] | ( T[i][k] & T[k][j] );
			}
		}
	}
}

----------------------------------------------