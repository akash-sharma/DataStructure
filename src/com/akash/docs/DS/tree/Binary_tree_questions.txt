Preorder, inorder, postorder using recursion | without using recursion
level order traversal (BFS) -> queue, recursion, 2 stack
get level of a node -> queue, recursion
get all nodes at a level -> queue, recursion
height of a binary tree
check if a binary tree is BST

Inorder traversal of binary tree without recursion with stack
Inorder traversal of binary tree without recursion without stack
print left view of binary tree		-- NLR keep tracking depth from the root , iterative | recursive
print right view of binary tree		-- NRL keep tracking depth from the root , iterative | recursive
print top view of binary tree		-- level order traversal, keep track of horizontal dist from root, create a map for (dist_from_root, node)
print bottom view of binary tree	-- same as top view, but next node found for same dist key , will override old key
print binary tree in vertical order
print boundary nodes in binary tree
print diagonal nodes in binary tree
Diagonal sum of binary tree

Print Level order traversal in spiral form starting from root node
    1
    3 2
    4 5 6 7

    1
    2 3
    7 6 5 4

Print Level order traversal in spiral form starting from left most leaf node
    4 5 6 7
    3 2
    1

Print Level order traversal in spiral form starting from right most leaf node
(mirror image of above)
    7 6 5 4
    2 3
    1

Reverse Level Order Traversal (L to R)
	4 5 6 7
	2 3
	1

Reverse Level Order Traversal (R to L)
    7 6 5 4
    3 2
    1

Level order traversal with direction change after every two levels
	1
	2 3
	7 6 5 4
	15 14 13 12 11 10 9 8
	16 17 18

print perfect binary tree in below form:
	1 2 3 4 7 5 6 8 15 9 14 10 13 11 12 16 31 17 30 18 29 19 28 20 27 21 26  22 25 23 24
	http://www.geeksforgeeks.org/perfect-binary-tree-specific-level-order-traversal/
	-> take level of a tree in array

Print root to leaf paths without using recursion
	->parent pointer in map
	

Kth largest in BST
Delete binary tree
check if two binary trees are identical
check if two binary trees are isomorphic
check if two trees are mirror
	->recursive
		->node.data, left==right, right==left
	->iterative
		->level order traversal with isLeft variable
		->compare LNR and RNL
convert a binary tree into its mirror

sorted linked list to BST
	->O(nlog(n)) mid of linked list will be root, use recursive for left and right
	->O(n)
	    -> convert linked list to array
	    -> create empty BST with size of linked list,iterate through list and do inorder traverse to fill BST
sorted array to balanced BST
	->mid of array will be root, use recursive for left and right
binary tree to doubly linked list
	->similar to check if binary tree is a BST
normal BST to balanced BST
	->inorder of BST, sorted array to balanced BST

BST to min heap
	->inorder traversal of BST is min heap
find median in BST
	->check no of nodes in BST,do inorder traversal and stop at n/2
BST from preorder
	-> O(n^2) first element will be root, find first number in array greater than root,right subtree starts from there.Recursive
	-> O(n)  - find next greater element for each element in preorder array (stack)
BST from postorder

Construct Tree from given Inorder and Preorder traversals
	-> naive approach will take O(N^2) time
	-> use hashmap for storing index of each key, time = O(N)
Construct Tree from given Inorder and Postorder traversals
	-> naive approach will take O(N^2) time
	-> use hashmap for storing index of each key, time = O(N)
Construct Tree from Inorder and Level order traversals


Lowest Common Ancestor(LCA)
	->findPath(Node,Node,List<Node>)
			recursively find full path of a node in a tree and capture it in a list.
			time = O(n),  memory = O(n) 
	-> do any traversal on tree and store parent of each node in a hashmap 
			time = O(n),  memory = O(n) 
	-> Every node should return a status object of two boolean variables
		every node should tell if its subtree(including itself), contains both nodes
	-> Build Euler path of tree with level of nodes
		find minimum level bw the two nodes

check if binary tree is heap   
	-> level order traversal, check parent child relation (0 to n/2)
given level order traversal of binary tree, check if min heap

Construct all possible BSTs for keys 1 to N
Find all possible binary trees with given Inorder Traversal
merge k sorted arrays
floor and ceiling of a BST

path with max sum in binary tree
	-> every node will return max path sum of its own subtree to its parent
		-> we can also exclude both left and right, as nodes can be negative
	-> it will also check if current node forms max sum with both left and right subtree
Check if all leaves are at same level
	-> do level order traversal, check if node is leaf, save its level 
	-> recursive pre, in, post order traversal and perform same check

Two nodes of a BST are swapped, correct the BST
	-> case 1 : two nodes are not adjacent
	-> case 2 : two nodes are adjacent
Diameter of a binary tree
	->every node will check its left max height and right max height
Remove all nodes which donï¿½t lie in any path with sum>= k
	-> every node will pass its sum of nodes from root , to its left and right child
	-> at any node if sum >= k, return "do not delete"
	-> only at leaf node, if sum < k, return "delete me", recursively check this at every node
--Convert left-right representation of a binary tree to down-right
Minimum no. of iterations to pass information to all nodes in the tree

Check for Children Sum Property in a Binary Tree 


--------------------------------------------------

Foldable Binary Trees  -- left and right subtrees of the tree are structure wise mirror image 
Symmetric Tree (Mirror Image of itself) 
Reverse tree path
	-> store path in an array, swap data from front to end
Reverse alternate levels of a perfect binary tree
	-> store such path in an array, change tree based on that array

--Calculate depth of a full Binary tree from Preorder
--Modify a binary tree to get preorder traversal using right pointers only

--Construct Full Binary Tree from given preorder and postorder traversals
Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree
	-> pre -- NLR ,pre mirror -- NRL
--Construct a special tree from given preorder traversal

Construct tree from ancestor matrix
ancestor matrix from binary tree
Construct a special tree from given preorder traversal
Construct Binary Tree from given Parent Array representation
Creating a tree with Left-Child Right-Sibling Representation
Convert a Binary Tree into Doubly Linked List in spiral fashion
Convert Ternary Expression to a Binary Tree
Convert Ternary Expression to a Binary Tree

--------------------------------------------------
Checking & Printing :

Check if removing an edge can divide a Binary Tree in two halves
check if tree is full binary tree
check if tree is perfect binary tree
Check if a given Binary Tree is height balanced like a Red-Black Tree
Check if a binary tree is subtree of another binary tree 
Check if a Binary Tree contains duplicate subtrees of size 2 or more
Check if there is a root to leaf path with given sequence
Print middle level of perfect binary tree without finding height

--------------------------------------------------

Summation :

--------------------------------------------------------------


--binary tree
--BST
--AVL tree
--Segment tree
	https://kartikkukreja.wordpress.com/2014/11/09/a-simple-approach-to-segment-trees/

red black tree
interval tree
threaded binary tree

--Heap

==============================================================

void preorder(Node root) {
	if(root != null) {
		process(root);
		preorder(root.left);
		preorder(root.right);
	}
}

void inorder(Node root) {
	if(root != null) {
		inorder(root.left);
		process(root);
		inorder(root.right);
	}
}

void postorder(Node root) {
	if(root != null) {
		postorder(root.left);
		postorder(root.right);
		process(root);
	}
}

void preOrder(Node root) {
	Stack<Node> stack = new Stack<>();
	stack.push(root);
	while(stack.size() > 0) {
		Node temp = stack.pop();
		process(temp);
		if(temp.left != null) {
			stack.push(temp.left);
		}
		if(temp.right != null) {
			stack.push(temp.right);
		}
	}
}


void inOrder(Node root) {
	Stack<Node> stack = new Stack<>();
	stack.push(root);
	while(root.left != null) {
		stack.push(root.left);
		root = root.left;
	}
	while(stack.size() > 0) {
		Node temp = stack.pop();
		process(temp);
		if(temp.right != null) {
			temp = temp.right;
			stack.push(temp);
			while(temp.left != null) {
				temp = temp.left;
				stack.push(temp);
			}
		}
	}
}


void postOrder(Node root) {
	Stack<Node> stack = new Stack<>();
	stack.push(root);
	while(root.left != null) {
		stack.push(root.left);
		root = root.left;
	}
	while(stack.size() > 0) {
		Node temp = stack.peek();
		if(temp.isRightNodeProcessed()) {
			process(temp);
			stack.pop();
		} else {
			temp.setRightNodeProcessed(true);
			if(temp.right != null) {
				temp = temp.right;
				stack.push(temp);
				while(temp.left != null) {
					temp = temp.left;
					stack.push(temp);
				}
			}
		}
	}
}


void inOrder(Node root) {
	Node temp = root;
	Node pre = null;
	while(temp != null) {
		if(temp.left != null) {
			pre = temp.left;
			while(pre.right != null && pre.right != temp) {
				pre = pre.right;
			}
			if(pre.right == null) {
				pre.right = temp;
				temp = temp.left;
			} else {
				pre.right = null;
				process(temp);
				temp = temp.right;
			}
		} else {
			process(temp);
			temp = temp.right;
		}
	}
}

------------------------

// recursive way to calculate height of binary tree

int getHeight(Node root) {
	if(root == null) {
		return 0;
	}
	int left = getHeight(root.left);
	int right = getHeight(root.right);
	return max(left, right) + 1;
}

------------------------

// recursive way to calculate height of binary tree

private int height = 0;

public int getHeight(Node root) {
	getHeight(root, 1);
	return height;
}

private void getHeight(Node root, int level) {
	if(root != null) {
		if(height < level) {
			height = level;
		}
		getHeight(root.left, level+1);
		getHeight(root.right, level+1);
	}
}

------------------------

// level order traversal, without calculating level of node
// iterative way of level order traversal

void levelOrderTraversal(Node root) {
	Queue<Node> queue = new LinkedList<>();
	queue.add(root);
	while(queue.size() != 0) {
		Node temp = queue.poll();
		process(temp);
		if(temp.left != null) {
			queue.add(temp.left);
		}
		if(temp.right != null) {
			queue.add(temp.right);
		}
	}
}

------------------------

// level order traversal with calculating each level and height
// iterative way to calculate height

int levelOrderTraversal(Node root) {
	Queue<Node> queue = new LinkedList<>();
	queue.add(root);
	int height = 0;
	while(queue.size() != 0) {
		int size = queue.size();
		height++;
		while(size > 0) {
			size--;
			Node temp = queue.poll();
			process(temp)
			if(temp.left != null) {
				queue.add(temp.left);
			}
			if(temp.right != null) {
				queue.add(temp.right);
			}
		}
	}
	return height;
}


------------------------

// recursive way of level order traversal

void levelOrderTraversal() {
	int height = getHeight(root);
	for(int i=0; i<height; i++) {
		recursiveLevelOrder(root, i);
	}
}

private void recursiveLevelOrder(Node root, int level) {
	if(root != null) {
		if(level == 0) {
			process(root);
		} else {
			recursiveLevelOrder(root.left, level-1);
			recursiveLevelOrder(root.right, level-1);
		}
	}
}

------------------------

//check if binary tree is a BST

private Node previousNode = null;

boolean isBinaryTreeBst(Node root) {
	if(root != null) {
		if( !isBinaryTreeBst(root.left) ) {
			return false;
		}
		if(previousNode != null && previousNode.value > root.value) {
			return false;
		}
		previousNode = root;
		return isBinaryTreeBst(root.right);
	}
	return true;
}


------------------------

// print left view of binary tree
// recursive way
// N L R

private int levelProcessed = 0;

public void printLeftView(Node root) {
	printLeftView(root, 1);
}

private void printLeftView(Node root, int level) {
	if(root != null) {
		if(levelProcessed < level) {
			levelProcessed++;
			process(root);
		}
		printLeftView(root.left, level + 1);
		printLeftView(root.right, level + 1);
	}
}

------------------------

// print left view of binary tree
// iterative way
// N L R

void printLeftView(Node root) {
	Queue<Node> queue = new LinkedList<>();
	queue.add(root);
	int level = 0;
	int levelProcessed = 0;
	while(queue.size() > 0) {
		level++;
		int size = queue.size();
		while(size > 0) {
			size--;
			Node temp = queue.poll();
			if(levelProcessed < level) {
				levelProcessed++;
				process(temp);
			}
			if(temp.left != null) {
				queue.add(temp.left);
			}
			if(temp.right != null) {
				queue.add(temp.right);
			}
		}
	}
}

------------------------

// print right view of binary tree
// recursive way
// N R L

private int levelProcessed = 0;

public void printRightView(Node root) {
	printRightView(root, 1);
}

private void printRightView(Node root, int level) {
	if(root != null) {
		if(levelProcessed < level) {
			levelProcessed++;
			process(root);
		}
		printRightView(root.right, level + 1);
		printRightView(root.left, level + 1);
	}
}

------------------------

// print right view of binary tree
// iterative way
// N R L

void printRightView(Node root) {
	Queue<Node> queue = new LinkedList<>();
	queue.add(root);
	int level = 0;
	int levelProcessed = 0;
	while(queue.size() > 0) {
		level++;
		int size = queue.size();
		while(size > 0) {
			size--;
			Node temp = queue.poll();
			if(levelProcessed < level) {
				levelProcessed++;
				process(temp);
			}
			if(temp.right != null) {
				queue.add(temp.right);
			}
			if(temp.left != null) {
				queue.add(temp.left);
			}
		}
	}
}

------------------------

// print top view of binary tree
// can also be written in iterative way,
// each node has to store its level

private Map<Integer,Node> map = new TreeMap<>();

void printTopView(Node root) {
	printTopView(root, 0);
	map.values().iterator().forEachRemaining(node -> SOP(node.value));
}

private void printTopView(Node root, int level) {
	if(root != null) {
		if(map.get(level) != null) {
			map.put(level, root);
		}
		printTopView(root.left, level - 1);
		printTopView(root.right, level + 1);
	}
}

------------------------

// print bottom view of binary tree
// can also be written in iterative way,
// each node has to store its level

private Map<Integer,Node> map = new TreeMap<>();

void printBottomView(Node root) {
	printBottomView(root, 0);
	map.values().iterator().forEachRemaining(node -> SOP(node.value));
}

private void printBottomView(Node root, int level) {
	if(root != null) {
		map.put(level, root);
		printBottomView(root.left, level - 1);
		printBottomView(root.right, level + 1);
	}
}

------------------------

// print nodes of binary tree in vertical order
// can also be written in iterative way,
// each node has to store its level

private Map<Integer, List<Node>> map = new HashMap<>();

private void addToMap(Node node, Integer vertical) {
	List<Node> nodes = map.get(vertical);
	if(nodes == null) {
		nodes = new ArrayList<>();
		map.put(vertical, nodes);
	}
	nodes.add(node);
}

public void printVerticalOrder(Node root) {
	if(root != null) {
		verticalOrder(root, 0);
	}
	Set<Integer> verticals = map.keySet();
	Collections.sort(verticals);
	for(int vertical : verticals) {
		SOP(map.get(vertical));
	}
}

private void verticalOrder(Node node, int vertical) {
	addToMap(node, vertical);
	if(node.left != null) {
		verticalOrder(node.left, vertical-1);
	}
	if(node.right != null) {
		verticalOrder(node.right, vertical+1);
	}
}

------------------------

// print boundary nodes in binary tree

void printBoundary(Node root) {
	if(root != null) {
		process(root);
		printLeft(root.left);
		printLeaves(root.left);
		printLeaves(root.right);
		printRight(root.right);
	}
}

void printLeft(Node root) {
	if(root != null) {
		if(root.left != null) {
			process(root);
			printLeft(root.left);
		} else if(root.right != null) {
			process(root);
			printLeft(root.right);
		}
	}
}

void printRight(Node root) {
	if(root.right != null) {
		printRight(root.right);
		process(root);
	} else if(root.left != null) {
		printRight(root.left);
		process(root);
	}
}

void printLeaves(Node root) {
	if(root != null) {
		if(root.left == null && root.right == null) {
			process(root);
			return;
		}
		printLeaves(root.left);
		printLeaves(root.right);
	}
}

------------------------

// check if two binary trees are identical

boolean isIdentical(Node node1, Node node2) {
	if(node1 != null || node2 != null) {
		if(node1 == null) {
			return false;
		}
		if(node2 == null) {
			return false;
		}
		if(node1.data != node2.data) {
			return false;
		}
		if( !isIdentical(node1.left, node2.left)) {
			return false;
		}
		return isIdentical(node1.right, node2.right);
	}
	return true;
}

------------------------

// check if two binary trees are isomorphic

boolean isomorphic(Node node1, Node node2) {
	if(node1 != null || node2 != null) {
		if(node1 == null) {
			return false;
		}
		if(node2 == null) {
			return false;
		}
		if(node1.data != node2.data) {
			return false;
		}
		if( (isomorphic(node1.left, node2.left) && isomorphic(node1.right, node2.right))
			|| 
			(isomorphic(node1.left, node2.right) && isomorphic(node1.right, node2.left)) ){
			return true;
		}
		return false;
	}
	return true;
}

------------------------

// check if two trees are mirror

boolean isMirror(Node node1, Node node2) {
	if(node1 != null || node2 != null) {
		if(node1 == null) {
			return false;
		}
		if(node2 == null) {
			return false;
		}
		if(node1.data != node2.data) {
			return false;
		}
		if( !isMirror(node1.left, node2.right)) {
			return false;
		}
		return isMirror(node1.right, node2.left);
	}
	return true;
}

------------------------

// convert a binary tree into its mirror

Node mirror(Node root) {
	if(root != null) {
		Node left, right;
		right = mirror(root.left);
		left = mirror(root.right);
		root.left = left;
		root.right = right;
		return root;
	}
	return null;
}

------------------------

// sorted array to BST

Node root = sortedArrayToBst(arr, 0, arr.length-1);

Node sortedArrayToBst(int arr[], int start, int end) {
	if(start <= end) {
		int mid = start + (end-start)/2 ;
		Node node = new Node();
		node.data = arr[mid];
		node.left = sortedArrayToBst(arr, start, mid-1);
		node.right = sortedArrayToBst(arr, mid+1, end);
		return node;
	}
	return null;
}

------------------------

// sorted singly linked list to BST

TreeNode sortedLinkedListToBst(LlNode node) {
	if(node != null) {
		LlNode middleNode = getMiddle(node);
		LlNode nextToMiddle = middleNode.next;
		middleNode.next = null;
		TreeNode treeNode = new TreeNode();
		treeNode.data = middleNode.data;
		treeNode.left = sortedLinkedListToBst(node);
		treeNode.right = sortedLinkedListToBst(nextToMiddle);
		return treeNode;
	}
	return null;
}

LlNode getMiddle(LlNode node) {
	LlNode fastPointer = node;
	LlNode slowPointer = node;
	LlNode prevToSlow = null;
	while(fastPointer.next != null && fastPointer.next.next != null) {
		fastPointer = fastPointer.next.next;
		prevToSlow = slowPointer;
		slowPointer = slowPointer.next;
	}
	if(prevToSlow != null) {
		prevToSlow.next = null;
	}
	return slowPointer;
}

------------------------

// Lowest Common Ancestor(LCA)
// recursive findPath()

time 	-- O(N)
memory 	-- O(N)

Node lowestCommonAncestor(Node root, Node node1, Node node2) {
	List<Node> list1 = new ArrayList<>();
	List<Node> list2 = new ArrayList<>();
	findPath(root, node1, list1);
	findPath(root, node2, list2);
	Collections.reverse(list1);
	Collections.reverse(list2);
	if(list1.size() == 0 || list2.size() == 0) {
		return null;
	}
	int minSize = list1.size() > list2.size() ? list2.size() : list1.size();
	return list1.get(minSize);
}

boolean findPath(Node key, Node root, List<Node> list) {
	if(root != null) {
		if(key.data == root.data) {
			list.add(root);
			return true;
		}
		if(findPath(key, root.left, list)) {
			list.add(root);
			return true;
		}
		if(findPath(key, root.right, list)) {
			list.add(root);
			return true;
		}
	}
	return false;
}

------------------------

// Lowest Common Ancestor(LCA)
time 	-- O(N)
memory 	-- O(1)

class Pojo {
	boolean isNode1;
	boolean isNode2;
}

private Node lca = null;

Node findPath(Node root, Node node1, Node node2) {
	findPath(root, node1, node2);
	if(lca != null) {
		print(lca);
	}
}

Pojo findPath(Node root, Node node1, Node node2) {
	Pojo pojo = new Pojo();
	if(root != null) {
		if(root.data == node1.data) {
			pojo.isNode1 = true;
		} else if(root.data == node2.data) {
			pojo.isNode2 = true;
		}
		Pojo leftChildPojo = findPath(root.left, node1, node2);
		if(lca != null) {
			return pojo;
		}
		if( (pojo.isNode1 && leftChildPojo.isNode2) ||
			(pojo.isNode2 && leftChildPojo.isNode1) ) {
			
			lca = root;
			return pojo;
		}
		Pojo rightChildPojo = findPath(root.right, node1, node2);
		if(lca != null) {
			return pojo;
		}
		if( (pojo.isNode1 && rightChildPojo.isNode2) ||
			(pojo.isNode2 && rightChildPojo.isNode1) ) {
			
			lca = root;
			return pojo;
		}
	}
	return pojo;
}


------------------------

// Lowest Common Ancestor(LCA)
// recursive saving parent of each node in hashmap

time 	-- O(N)
memory 	-- O(N)





------------------------

// Lowest Common Ancestor(LCA)
// Euler method

time 	-- O(N)
memory 	-- O(N)




------------------------

//binary tree to doubly linked list

private Node previousNode = null;
private Node head = null;

void binaryTreeToDoublyLl(Node root) { 
	internalBinaryTreeToDoublyLl(root);
	return head;
}

private void internalBinaryTreeToDoublyLl(Node root) {
	if(root != null) {
		binaryTreeToDoublyLl(root.left);
		
		if(previousNode != null) {
			root.left = previousNode;
			previousNode.right = root;
		} else {
			head = root;
		}
		previousNode = root;
		binaryTreeToDoublyLl(root.right);
	}
}

------------------------

// Create all BST from sorted array

void printAllBst(int arr[]) {
	List<List<Integer>> list = getAllBst(arr, 0, arr.length-1);
	for(List<Integer> preOrders : list) {
		System.out.println(preOrders);
	}
}

List<List<Integer>> getAllBst(Integer arr[], int start, int end) {
	List<List<Integer>> returnedList = new ArrayList<>();
	if(start < end) {
		List<Integer> list = new LinkedList<>();
		returnedList.add(list);
	}
	for(int i=start; i<=end; i++) {
		List<List<Integer>> leftList = getAllBst(arr, start, i-1);
		List<List<Integer>> rightList = getAllBst(arr, i+1, end);
		for(int j=0; j<leftList.size(); j++) {
			for(int k=0; k<rightList.size(); k++) {
				List<Integer> list = new LinkedList<>();
				list.add(arr[i]);
				list.addAll(leftList.get(j));
				list.addAll(rightList.get(k));
				returnedList.add(list);
			}
		}
	}
	return returnedList;
}

------------------------

// Diameter of a Binary Tree
	->every node will save its left max height and right max height

private int maxDiameter = 0;

int diameter(Node root) {
	if(root != null) {
		int left=0;
		int right=0;
		if(root.left != null) {
			left = diameter(root.left);
		}
		if(root.right != null) {
			right = diameter(root.right);
		}
		maxDiameter = max(maxDiameter , left+right+1);
		return max(left, right) + 1;
	}
	return 0;
}

------------------------

// path with max sum in binary tree
	-> every node will return max path sum of its own subtree to its parent
		-> we can also exclude both left and right, as nodes can be negative
	-> it will also check if current node forms max sum with both left and right subtree

private int maxPathSum = 0;
	
int getMaxPathSum(Node root) {
	if(root != null) {
		int leftTreeSum = getMaxPathSum(root.left);
		int rightTreeSum = getMaxPathSum(root.right);
		maxPathSum = max(maxPathSum,leftTreeSum + rightTreeSum + root.data);
		return max(root.data , max(leftTreeSum,rightTreeSum) + root.data);
	}
	return 0;
}

------------------------

// Two nodes of a BST are swapped, correct the BST
	-> case 1 : two nodes are not adjacent
	-> case 2 : two nodes are adjacent

Node prev = null; 
Node firstSmall = null;
Node secondSmall = null;

void correctSwappedBst(Node root) {
	inOrder(root);
	swapData(firstSmall, secondSmall);
}

private void inOrder(Node root) {
	if(root != null) {
		inOrder(root.left);
		if(prev != null && prev.data > root.data) {
			if(firstSmall != null) {
				firstSmall = prev;
			}
			secondSmall = root;
		}
		prev = root;
		inOrder(root.right);
	}
}

------------------------

// Print Level order traversal in spiral form
Input Tree
1
2 3
4 5 6 7

output
1 3 2 4 5 6 7


void printSpiralForm(Node root) {
	Stack s1 = new Stack();
	Stack s2 = new Stack();
	s1.push(root);
	while(s1.size() != 0 || s2.size() != 0) {
		while(s1.size() != 0) {
			Node temp = s1.pop();
			print(temp);
			if(temp.left != null) {
				s2.push(temp.left);
			}
			if(temp.right != null) {
				s2.push(temp.right);
			}
		}
		while(s2.size() != 0) {
			Node temp = s2.pop();
			print(temp);
			if(temp.right != null) {
				s1.push(temp.right);
			}
			if(temp.left != null) {
				s1.push(temp.left);
			}
		}
	}
}


-----------------------
// Print Level order traversal in spiral form starting from left most leaf node
// different height for odd and even height

int height = height(root);
printSpiralForm(root, height % 2 == 0);


void printSpiralForm(Node root, boolean isEven) {
	Stack s1 = new Stack();
	Stack s2 = new Stack();
	Stack s3 = new Stack();
	s1.push(root);
	while(s1.size() != 0 || s2.size() != 0) {
        while(s1.size() != 0) {
            Node temp = s1.pop();
            s3.push(temp);
            if(isEven) {
                if(temp.right != null) {
                    s2.push(temp.right);
                }
                if(temp.left != null) {
                    s2.push(temp.left);
                }
            } else {
                if(temp.left != null) {
                    s2.push(temp.left);
                }
                if(temp.right != null) {
                    s2.push(temp.right);
                }
            }
        }
        while(s2.size() != 0) {
            Node temp = s2.pop();
            s3.push(temp);
            if(!isEven) {
                if(temp.right != null) {
                    s1.push(temp.right);
                }
                if(temp.left != null) {
                    s1.push(temp.left);
                }
            } else {
                if(temp.left != null) {
                    s1.push(temp.left);
                }
                if(temp.right != null) {
                    s1.push(temp.right);
                }
            }
        }
	}
    while(s3.size() != 0) {
        print(s3.pop());
    }
}


------------------------

// Reverse Level Order Traversal (L to R)

4 5 6 7
2 3
1


void printReverseOrder(Node root) {
	Queue queue = new ArrayList<>();
	Stack stack = new Stack();
	queue.offer(root);
	while(queue.size() != 0) {
		int size = queue.size();
		while(size > 0) {
			Node temp = queue.poll();
			stack.push(temp);
			if(temp.right != null) {
				queue.offer(temp.right);
			}
			if(temp.left != null) {
				queue.offer(temp.left);
			}
		}
		stack.push(null);
	}
	while(stack.size() != 0) {
		Node temp = stack.pop();
		if(temp != null) {
			print(temp);
		} else {
			println();
		}
	}
}


------------------------


Reverse Level Order Traversal (R to L)
    7 6 5 4
    3 2
    1

void printReverseOrder(Node root) {
	Queue queue = new ArrayList<>();
	Stack stack = new Stack();
	queue.offer(root);
	while(queue.size() != 0) {
		int size = queue.size();
		while(size > 0) {
			Node temp = queue.poll();
			stack.push(temp);
			if(temp.left != null) {
				queue.offer(temp.left);
			}
			if(temp.right != null) {
                queue.offer(temp.right);
            }
		}
		stack.push(null);
	}
	while(stack.size() != 0) {
		Node temp = stack.pop();
		if(temp != null) {
			print(temp);
		} else {
			println();
		}
	}
}

------------------------

// Level order traversal with direction change after every two levels
	1
	2 3
	7 6 5 4
	15 14 13 12 11 10 9 8
	16 17 18 ...
	
void printLevelOrderWithAdjDirection(Node root) {
	Queue queue = new ArrayList<>();
	Stack stack = new Stack();
	queue.offer(root);
	int level = 0;
	boolean isStacklevel = false;
	while(queue.size() != 0) {
		int size = queue.size();
		while(size > 0) {
			Node temp = queue.poll();
			if(isStacklevel) {
				stack.push(temp);
			} else {
				print(temp);
			}
			if(temp.left != null) {
				queue.offer(temp.left);
			}
			if(temp.right != null) {
				queue.offer(temp.right);
			}
		}
		printStackData(stack);
		level = level ^ 1;
		if(level == 0) {
			if(!isStacklevel) {
				isStacklevel = true;
			} else {
				isStacklevel = false;
			}
		}
	}
}

void printStackData(Stack stack) {
	while(stack.size() != 0) {
		print(stack.pop());
	}
}

------------------------
// sorted linked list to BST
-> n log(n)

TNode getBst(LNode node) {
	if(node == null) {
		return null;
	}
	CompositeNode compositeNode = getMiddle(node);
	TNode root = new TNode(compositeNode.middle);
	root.left = getBst(compositeNode.first);
	root.right = getBst(compositeNode.nextToMiddle);
	return root;
}

CompositeNode getMiddle(LNode node) {
	LNode slow = node;
	LNode fast = node;
	LNode pre = null;
	while(fast.next != null && fast.next.next != null) {
		pre = slow;
		slow = slow.next;
		fast = fast.next.next;
	}
	if(pre != null) {
		pre.next = null;
	}
	LNode nextToMiddle = slow.next;
	slow.next = null;
	return new CompositeNode(node, slow, nextToMiddle);
}



class CompositeNode {
	LNode first;
	LNode middle;
	LNode nextToMiddle;

	CompositeNode(LNode first,LNode middle,LNode nextToMiddle) {
		this.first = first;
		this.middle = middle;
		this.nextToMiddle = nextToMiddle;
	}
}

------------------------

// print euler path of binary tree

printEuler(Node root) {
    List<Node> list = new LinkedList<>();
    populateEulerPathOfTree(root, list);
    for(Node node : list) {
        print(node);
    }
}

populateEulerPathOfTree(Node node, List<Node> list) {
    list.add(node);
    if(node.left != null) {
        populateEulerPathOfTree(node.left, list);
        list.add(node);
    }
    if(node.right != null) {
        populateEulerPathOfTree(node.right, list);
        list.add(node);
    }
}

// LCA problem
// print euler path of binary tree with level of each node
// if node level is L, then node.left level is L+1 and node.right level is L+1

------------------------
