=>Cluster
A cluster is a collection of one or more nodes (servers)
A cluster is identified by a unique name which by default is "elasticsearch"
it is valid and perfectly fine to have a cluster with only a single node in it


=>Node
A node is a single server that is part of your cluster
a node is identified by a name which by default is a random Universally Unique IDentifier (UUID)
 that is assigned to the node at startup. 
You can define any node name you want if you do not want the default. 
each node is set up to join a cluster named elasticsearch.


=>Index
An index is a collection of documents that have somewhat similar characteristics
index for customer data, another index for a product catalog
An index is identified by a name


=>Document
A document is a basic unit of information that can be indexed
expressed in JSON

=>Shards
Elasticsearch provides the ability to subdivide your index into multiple pieces called shards.
When you create an index, you can simply define the number of shards that you want. 

=>Replica
for failover mechanism 
high availability 


Each index can be split into multiple shards.
An index can also be replicated zero (meaning no replicas) or more times.

Features:
-> Using pure Lucene is challenging as it is a library.
-> ElasticSearch Supports Http and JSON
-> ElasticSearch will work in Distributed and sharded environment
-> CRUD operations on indexes
-> Advanced operations like paging, sorting, filtering, scripting, aggregations


start elastic search :

cd elasticsearch-6.5.4
./bin/elasticsearch


curl -X GET "localhost:9200/_cat/health?v&pretty"
	health of clustur

curl -X GET "localhost:9200/_cat/nodes?v"
	all nodes info

curl -X GET http://localhost:9200/_cat/indices?v
	all indices info


curl -X PUT "localhost:9200/customer?pretty"
	
	{
	    "acknowledged": true,
	    "shards_acknowledged": true,
	    "index": "customer"
	}


curl -X GET "localhost:9200/_cat/indices?v"
	
	health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size
	yellow open   customer RyixuXr0Qq6t_tHSldjKrw   5   1          0            0      1.1kb          1.1kb


	1 index named customer
	it has 5 primary shards
	1 replica (the defaults)
	it contains 0 documents in it


curl -X PUT "localhost:9200/customer/_doc/1?pretty" -H 'Content-Type: application/json' -d'
{
  "name": "John Doe"
}
'


Elasticsearch will automatically create the customer index if it didnâ€™t already exist beforehand



curl -X GET "localhost:9200/customer/_doc/1?pretty"


curl -X GET "localhost:9200/customer/_doc"


// To search for specific terms within a field
// searches the address field to find customers whose addresses contain mill or lane
curl -X GET "localhost:9200/customer/_search?pretty" -H 'Content-Type: application/json' -d'
{
  "query": { "match": { "address": "mill lane" } }
}
'

// perform a phrase search
curl -X GET "localhost:9200/customer/_search?pretty" -H 'Content-Type: application/json' -d'
{
  "query": { "match_phrase": { "name": "John_Doe_1" } }
}
'



curl -X GET "localhost:9200/customer/_search?pretty" -H 'Content-Type: application/json' -d'
{
  "query": {
    "bool": {
      "must": [
        { "match": { "age": "40" } }
      ],
      "must_not": [
        { "match": { "state": "ID" } }
      ]
    }
  }
}
'





set analyser in java api:
https://stackoverflow.com/questions/6275727/define-custom-elasticsearch-analyzer-using-java-api

Spring data for ES
https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference

=========================


Query DSL : There are two types of clauses :

(1) Leaf query clauses : 
Leaf query clauses look for a particular value in a particular field

match, term, phrase

(2) Compound query clauses : 
Compound query clauses wrap other leaf or compound queries 
and are used to combine multiple queries in a logical fashion

bool



======================

Term query : Returns documents that contain an exact term in a provided field.

The match query analyzes the provided search term before performing a search
The term query does not analyze the search term


curl -X PUT "localhost:9200/my-index-000001/_doc/1?pretty" -H 'Content-Type: application/json' -d'
{
  "full_text":   "Quick Brown Foxes!"
}
'


Tokens after Standard analyser : [quick, brown, fox]


// No result
curl -X GET "localhost:9200/my-index-000001/_search?pretty&pretty" -H 'Content-Type: application/json' -d'
{
  "query": {
    "term": {
      "full_text": "Quick Brown Foxes!"
    }
  }
}
'


// one result
curl -X GET "localhost:9200/my-index-000001/_search?pretty&pretty" -H 'Content-Type: application/json' -d'
{
  "query": {
    "match": {
      "full_text": "Quick Brown Foxes!"
    }
  }
}
'


======================

Terms Query : similar to term query, but you can search multiple fields with exact same value.


curl -X GET "localhost:9200/my-index-000001/_search?pretty&pretty" -H 'Content-Type: application/json' -d'
{
  "query": {
    "terms": {
        "color" : {
            "index" : "my-index-000001",
            "id" : "2",
            "path" : "color"
        }
    }
  }
}
'


terms_set : Returns documents that contain a minimum number of exact terms in a provided field.


========================


// nested query, should inside a merge
// pagination (size and from)
// projection of fields : request
// range query on timestamp field

curl -X GET "localhost:9200/my_index_name/_search?pretty" -H 'Content-Type: application/json' -d'
{ "size" : 4, 
  "from" : 0,
  "_source": ["request"],
  "query": {
"bool" : {
    "must" : [
	{
		"bool" : {
				"should" : [
					{ "match": { "request" : "/all_my_list" } },
					{ "match": { "request" : "/all_my_detail" } },
					{ "match": { "request" : "/my_home_page" } }
				   ]
			}
	},
      {
        "exists" : {
          "field" : "my_custom_field"
        }
      }
    ],
    "filter" : [
      {
        "range" : {
          "timestamp" : {
            "from" : "2020-08-27T13:32:00.000",
            "to" : "2020-08-27T15:54:39.251"
          }
        }
      }
    ],
    "adjust_pure_negative" : true,
    "boost" : 1.0
  }
}
}}'



---------------------------

GET /my_index_name/doc/_search?routing=my_unique_routing_key


----------------------------



GET /my_index_name/_search
{
  "query": {
        "bool": {
            "must": [
                {"match": {"customer" : "3955138"}},
                {"match": {"uuid" : "lpEG683272A254W17"}}
            ],
	    "filter" : [
		{
			"range" : {
            			"requestTime" : {
                			"gte" : "now-3d/d",
                			"lt" :  "now/d"
            			}
        		}
		}
	    ]
        }
    },
  "sort": [
    { "requestTime" : "desc" }
  ]
}

-----------------------
