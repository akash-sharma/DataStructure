
// Debezium Connector for MySQL doc
https://debezium.io/documentation/reference/0.10/connectors/mysql.html

*** https://wecode.wepay.com/posts/streaming-databases-in-realtime-with-mysql-debezium-kafka#:~:text=Kafka%20connect%20and%20Debezium%20work,will%20pick%20up%20from%20there.

// kafka connect doc
https://docs.confluent.io/2.0.0/connect/userguide.html

// what is row based logs and replication
*** https://www.databasejournal.com/features/mysql/article.php/3922266/Comparing-MySQL-Statement-Based-and-Row-Based-Replication.htm

// steps to configure
*** https://blog.clairvoyantsoft.com/mysql-cdc-with-apache-kafka-and-debezium-3d45c00762e4

// automatic restart kafka connector
https://rmoff.net/2019/06/06/automatically-restarting-failed-kafka-connect-tasks/



==================

kafka connect commands and configuration


(1) enable row based logs on atleast one mysql slave server
(2) enable gtid on all mysql servers
(3) open connectivity from kafka connect server to mysql servers
(4) create new mysql user with permissions required for debizium


// get all connectors name
curl -X GET http://localhost:8083/connectors


// get kafka connector configuration
curl -X GET http://localhost:8083/connectors/my_connector_name


// create or edit kafka connect configuration
curl -X POST   http://10.254.16.133:8083/connectors -d'
{
   "name":"my_debizium_mysql_connector",
   "config":{
      "connector.class":"io.debezium.connector.mysql.MySqlConnector",
      "database.user":"debezium",
      "database.server.name":"<database_name>",
      "database.port":"3306",
      "database.server.id":"<any_random_number>",
      "database.hostname":"<database_host>",
      "database.password":"<database_password>",

      "database.history.kafka.topic":"<topic_name>",
      "database.history.kafka.bootstrap.servers":"<kafka_broker_ip>:9092",
      "event.deserialization.failure.handling.mode":"warn",
      "time.precision.mode":"connect",
      
      "include.schema.changes":"true",
      "table.whitelist":"<database_name>.<table_name>",
      "inconsistent.schema.handling.mode":"ignore",
      
      "name":"my_debizium_mysql_connector",
      "database.history.skip.unparseable.ddl":"true",
      "database.history.store.only.monitored.tables.ddl":"true",
      "database.whitelist":"<database_name>",
      "snapshot.mode":"schema_only"
   }
}
'

snapshot.mode : schema_only , schema_only_recovery

database.history.kafka.topic : 

kafka topic name where debizium packets will be pushed : {database.whitelist} + "." + {table.whitelist}



// connector status
curl -X GET http://localhost:8083/connectors/my_connector_name/status


// delete connector
curl -X DELETE http://localhost:8083/connectors/my_connector_name


// pause connector
curl -X PUT http://localhost:8083/connectors/my_connector_name/pause


// resume connector
curl -X PUT http://localhost:8083/connectors/my_connector_name/resume


=================

https://engineeringblog.yelp.com/2016/08/streaming-mysql-tables-in-real-time-to-kafka.html
https://wecode.wepay.com/posts/streaming-databases-in-realtime-with-mysql-debezium-kafka

mysql cdc projects : https://github.com/wushujames/mysql-cdc-projects/wiki

kafka connect : https://docs.confluent.io/3.1.1/connect/

Debezium : https://debezium.io/documentation/reference/tutorial.html

Architecture : https://debezium.io/documentation/reference/architecture.html


Event driven architecture
Change data capture Design pattern
Near real time (NRT) data : how do we provide services with the data they require as soon as possible?



capturing each database change event, then wrapping it and pushing it to kafka

Duality of Streams and Tables : When database table change events are pushed over a stream to other systems by an order of timestamp.

In a master slave architecture like mysql, master node change events are synced to slave node in an asynchronous manner.
This synching is achived by pushing every DB change event to a bin log file on master node in an order by timestamp.
Slave nodes create a replica of binary log file of master binary log file and slave node updates its own DB state.


Types of Mysql Replication :
There are two ways of replicating a MySQL database:

(1) Statement-based replication (SBR)
(2) Row-based replication (RBR)

Statement-based replication : In this type of replication, sql statements are written to bin log files of master node and then these sql statements are copied to slave node bin log file.

Row-based replication : This type of replication contains actual data modified in rows of a table.

Types of events generated : Insert, Update, Delete and Refresh
These events contains before and after data to easily identify the types.

GTID : For fail safe replication accross all slave nodes, database requires a unique identier associated with every transaction.
It is identical across all the servers in a given replication setup. It helps in process of recovery of failure.
Once a transaction with a given GTID is committed on a given server, any subsequent transaction having the same GTID is ignored by that server. Thus, a transaction committed on the source can be applied no more than once on the replica, which helps to guarantee consistency.
It was introduced in MySQL 5.6.


Debezium is a distributed platform that turns your existing databases into event streams, so applications can see and respond immediately to each row-level change in the databases.

Debezium is built on top of Apache Kafka and provides Kafka Connect compatible connectors that monitor specific database management systems. Debezium provides implementation of kafka connect for various databases like mysql and postgress.

(1) enable row based logs on atleast one mysql slave server
(2) enable gtid on all mysql servers


An example of debezium packet :

{
  "before": {
    "id": 1005,
    "first_name": "Sachin",
    "last_name": "tendulkar",
    "email": "sachin@gmail.org"
  },
  "after": {
    "id": 1005,
    "first_name": "Sachin Ramesh",
    "last_name": "tendulkar",
    "email": "sachin@gmail.org"
  },
  "source": {
    "name": "mysql-server-1",
    "server_id": 226345,
    "ts_sec": 1265881,
    "gtid": null,
    "file": "mysql-bin.000004",
    "pos": 484,
    "row": 0,
    "snapshot": null
  },
  "op": "u",
  "ts_ms": 7462281029529
}



